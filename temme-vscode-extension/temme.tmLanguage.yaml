name: temme
scopeName: source.temme

patterns:
- include: "#temme-selector"

repository:
  temme-selector:
    patterns:
    - include: "#comments"

    - name: keyword.id-qualifier.temme
      match: "#[_[:alnum:]-]+"

    - name: keyword.parent-reference.temme
      match: "&"

    - name: entity.other.attribute-name.class.temme
      match: "\\.[_[:alnum:]-]+"

    - name: string.pseudo-qualifier.temme
      match: ":[_[:alnum:]-]+"

    - include: "#inlineFilterDefinition"

    - name: constant.temme
      match: "[_[:alnum:]-]+"

    - begin: "\\["
      end: "\\]"
      beginCaptures:
        '0': { name: meta.selector.temme }
      contentName: meta.attribute-qualifier.temme
      patterns:
      - include: '#comments'
      - begin: "\\$([_$[:alpha:]][_$[:alnum:]]*)?"
        beginCaptures: { 0: variable.parameter.temme }
        end: ""
        # // TODO supprot filters
        # end: "(?!\\|)"
        # patterns: [ { include: "#filters" }]
      - name: constant.temme
        match: "[_$[:alpha:]][_$[:alnum:]]*"
      - name: keyword.operator
        match: "=|~=|\\|=|\\*=|\\^=|\\$="
      - include: "#JSString"

    - begin: "(\\$([_$[:alpha:]][_$[:alnum:]]*)?)"
      beginCaptures:
        '0': { name: variable.parameter.temme }
      end: "(?!\\|)"
      patterns:
      - include: "#filters"

    - comment: snippet expansion
      match: "(@[_$[:alpha:]][_$[:alnum:]]*)\\s*;"
      captures:
        '1': { name: keyword.snippet-expansion.temme TODO }

    # snippet definiton
    - begin: "(@)([_$[:alpha:]][_$[:alnum:]]*)\\s*(=)"
      end: "(?<=\\})"
      beginCaptures:
        '1': { name: TODO.1 } # // TODO TODO
        '2': { name: TODO.2 }
        '3': { name: TODO.3 }
      contentName: meta.snippte-define.temme
      patterns:
      - include: "#comments"
      - begin: "\\{"
        end: "\\}"
        patterns:
        - include: "#temme-selector"

    - comment: TODO children selectors
      begin: "@([_$[:alpha:]][_$[:alnum:]]*)?"
      beginCaptures:
        '0':
          name: variable.parameter.temme
      end: "(?<=\\})"
      contentName: meta.children-selectors.temme
      patterns:
      - include: "#brace-loop"

    - begin: "\\{"
      end: "\\}"
      contentName: meta.content.temme
      patterns:
      - include: "#comments"
      - include: "#JSLiteral"
      - name: variable.parameter.temme
        match: "\\$([_$[:alpha:]][_$[:alnum:]]*)?" # // TODO support filters
      - comment: content function call
        begin: "([_$[:alpha:]][_$[:alnum:]]*)\\s*\\("
        beginCaptures: { 1: { name: entity.name.function }}
        end: "\\)"
        contentName: meta.content-function-call.temme
        patterns: [ { include: "#args" } ]
      - match: "="
        name: keyword.operator.temme

  JSLiteral:
    patterns:
    - name: constant.language.temme
      match: null|false|true
    - include: "#JSString"
    - include: "#JSNumeric"
    - include: "#JSRegex"
  args:
    patterns:
    - include: "#comments"
    - include: "#JSLiteral"
    - begin: "(\\$([_$[:alpha:]][_$[:alnum:]]*)?)"
      beginCaptures:
        '0':
          name: variable.parameter.temme
      end: "(?!\\|)"
      patterns:
      - include: "#filters"
    - name: punctuation.operator.temme
      match: "[, ]+"
  filters:
    patterns:
    - comment: Filter with args
      begin: "(\\||\\|\\|)([_$[:alpha:]][_$[:alnum:]]*)(\\()"
      beginCaptures:
        '1':
          name: keyword.operator.temme
        '2':
          name: entity.name.function.filter.temme
      end: "\\)"
      contentName: TODO.args.temme
      patterns:
      - include: "#args"
    - comment: Filter without args
      match: "(\\||\\|\\|)([_$[:alpha:]][_$[:alnum:]]*)"
      captures:
        '2':
          name: entity.name.function.filter.temme

  inlineFilterDefinition:
    patterns:
    - comment: TODO 需要使用和 JavaScript 语法那边差不多的方法 # // TODO XXX
      begin: "(filter)\\s+([_$[:alpha:]][_$[:alnum:]]*)"
      beginCaptures:
        '1':
          name: storage.filter.temme
        '2':
          name: entity.name.function
      end: "(?<=\\})"
      contentName: meta.parameters.temme
      patterns:
      - begin: "\\("
        end: "\\)"
        patterns:
        - include: "#args"
      - begin: "\\{"
        end: "\\}"
        contentName: js-in-temem.temme
        patterns:
        - include: source.js
  brace-loop:
    begin: "\\{"
    beginCaptures:
      '0': TODO
    end: "\\}"
    contentName: TODO
    patterns:
    - include: "#brace-loop"
  comments:
    patterns:
    - name: comment.block
      begin: "/\\*"
      beginCaptures: { 1: { name: comment.temme } }
      end: "\\*/"
      endCaptures: { 1: { name: comment.temme } }
    - name: comment.line
      begin: "\\/\\/"
      end: "$"
  JSString:
    patterns:
    - name: string.quoted.double.temme
      begin: "\""
      end: "\""
      patterns:
      - name: constant.character.escape.temme
        match: "\\\\."
    - name: string.quoted.single.temme
      begin: "'"
      end: "'"
      patterns:
      - name: constant.character.escape.temme
        match: "\\\\."
  JSNumeric:
    patterns:
    - comment: hexadecimal, octal and binary
      name: constant.numeric.temme
      match: 0(?:[xX][0-9a-fA-F]+|[oO][0-7]+|[bB][01]+)\b
    - comment: decimal integers and floats
      name: constant.numeric.temme
      match: "(?:\\d\\d*(?:\\.\\d*)?|\\.\\d+)(?:[eE][+-]?\\d+\b)?"
  JSRegex:
    patterns:
    - begin: "\\/"
      beginCaptures:
        '0':
          name: string.regexp.temme
      end: "(?:(/)([sxngimy]*))|$"
      endCaptures:
        '1':
          name: TODO.string.regexp.temme
        '2':
          name: TODO.keyword.temme
      contentName: string.regexp
      patterns:
      - comment: escapes
        name: constant.character
        match: "\\\\(?:u[\\da-fA-F]{4}|x[\\da-fA-F]{2}|.)"
      - comment: invalid operators
        name: invalid
        match: "\\{\\d+\\b,?\\d*\\}[+*]|[+*$^?][+*]|[$^][?]|\\?{3,}"
      - name: TODO.keyword.operator.or.regexp.temme
        match: "\\|"
      - begin: "\\[\\^?"
        end: "]|$"
        captures: { 0: { name: punctuation.definition.character-class.regexp.temme } }
        contentName: constant.other.character-class.set.regexp.temme
